{"version":3,"sources":["capture.js","index.js"],"names":["width","height","streaming","video","canvas","photo","startbutton","clearphoto","context","getContext","fillStyle","fillRect","data","toDataURL","setAttribute","window","addEventListener","startup","document","getElementById","navigator","mediaDevices","getUserMedia","facingMode","exact","audio","then","stream","srcObject","play","catch","err","console","log","ev","videoHeight","videoWidth","isNaN","takepicture","drawImage","preventDefault"],"mappings":";CAAA,WAKMA,IAAAA,EAAQ,IACRC,EAAS,EAKTC,GAAY,EAKZC,EAAQ,KACRC,EAAS,KACTC,EAAQ,KACRC,EAAc,KA+CTC,SAAAA,IACHC,IAAAA,EAAUJ,EAAOK,WAAW,MAChCD,EAAQE,UAAY,OACpBF,EAAQG,SAAS,EAAG,EAAGP,EAAOJ,MAAOI,EAAOH,QAExCW,IAAAA,EAAOR,EAAOS,UAAU,aAC5BR,EAAMS,aAAa,MAAOF,GAyB5BG,OAAOC,iBAAiB,OA5EfC,WACPd,EAAQe,SAASC,eAAe,SAChCf,EAASc,SAASC,eAAe,UACjCd,EAAQa,SAASC,eAAe,SAChCb,EAAcY,SAASC,eAAe,eAEtCC,UAAUC,aAAaC,aAAa,CAAEnB,MAAO,CAAEoB,WAAY,CAAEC,MAAO,gBAAmBC,OAAO,IAC3FC,KAAK,SAAUC,GACdxB,EAAMyB,UAAYD,EAClBxB,EAAM0B,SAEPC,MAAM,SAAUC,GACfC,QAAQC,IAAI,sBAAwBF,KAGxC5B,EAAMa,iBAAiB,UAAW,SAAUkB,GACrChC,IACHD,EAASE,EAAMgC,aAAehC,EAAMiC,WAAapC,GAK7CqC,MAAMpC,KACRA,EAASD,GAAS,EAAI,IAGxBG,EAAMW,aAAa,QAASd,GAC5BG,EAAMW,aAAa,SAAUb,GAC7BG,EAAOU,aAAa,QAASd,GAC7BI,EAAOU,aAAa,SAAUb,GAC9BC,GAAY,KAEb,GAEHI,EAAYU,iBAAiB,QAAS,SAAUkB,IA0BzCI,WACH9B,IAAAA,EAAUJ,EAAOK,WAAW,MAC5BT,GAAAA,GAASC,EAAQ,CACnBG,EAAOJ,MAAQA,EACfI,EAAOH,OAASA,EAChBO,EAAQ+B,UAAUpC,EAAO,EAAG,EAAGH,EAAOC,GAElCW,IAAAA,EAAOR,EAAOS,UAAU,aAC5BR,EAAMS,aAAa,MAAOF,QAE1BL,IAnCA+B,GACAJ,EAAGM,mBACF,GAEHjC,MAqCuC,GAjG3C;;ACAA,aAAA,QAAA","file":"src.4a042c8c.js","sourceRoot":"..\\src","sourcesContent":["(function () {\n  // The width and height of the captured photo. We will set the\n  // width to the value defined here, but the height will be\n  // calculated based on the aspect ratio of the input stream.\n\n  var width = 320;    // We will scale the photo width to this\n  var height = 0;     // This will be computed based on the input stream\n\n  // |streaming| indicates whether or not we're currently streaming\n  // video from the camera. Obviously, we start at false.\n\n  var streaming = false;\n\n  // The various HTML elements we need to configure or control. These\n  // will be set by the startup() function.\n\n  var video = null;\n  var canvas = null;\n  var photo = null;\n  var startbutton = null;\n\n  function startup() {\n    video = document.getElementById('video');\n    canvas = document.getElementById('canvas');\n    photo = document.getElementById('photo');\n    startbutton = document.getElementById('startbutton');\n\n    navigator.mediaDevices.getUserMedia({ video: { facingMode: { exact: \"environment\" } }, audio: false })\n      .then(function (stream) {\n        video.srcObject = stream;\n        video.play();\n      })\n      .catch(function (err) {\n        console.log(\"An error occurred: \" + err);\n      });\n\n    video.addEventListener('canplay', function (ev) {\n      if (!streaming) {\n        height = video.videoHeight / (video.videoWidth / width);\n\n        // Firefox currently has a bug where the height can't be read from\n        // the video, so we will make assumptions if this happens.\n\n        if (isNaN(height)) {\n          height = width / (4 / 3);\n        }\n\n        video.setAttribute('width', width);\n        video.setAttribute('height', height);\n        canvas.setAttribute('width', width);\n        canvas.setAttribute('height', height);\n        streaming = true;\n      }\n    }, false);\n\n    startbutton.addEventListener('click', function (ev) {\n      takepicture();\n      ev.preventDefault();\n    }, false);\n\n    clearphoto();\n  }\n\n  // Fill the photo with an indication that none has been\n  // captured.\n\n  function clearphoto() {\n    var context = canvas.getContext('2d');\n    context.fillStyle = \"#AAA\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n\n    var data = canvas.toDataURL('image/png');\n    photo.setAttribute('src', data);\n  }\n\n  // Capture a photo by fetching the current contents of the video\n  // and drawing it into a canvas, then converting that to a PNG\n  // format data URL. By drawing it on an offscreen canvas and then\n  // drawing that to the screen, we can change its size and/or apply\n  // other changes before drawing it.\n\n  function takepicture() {\n    var context = canvas.getContext('2d');\n    if (width && height) {\n      canvas.width = width;\n      canvas.height = height;\n      context.drawImage(video, 0, 0, width, height);\n\n      var data = canvas.toDataURL('image/png');\n      photo.setAttribute('src', data);\n    } else {\n      clearphoto();\n    }\n  }\n\n  // Set up our event listener to run the startup process\n  // once loading is complete.\n  window.addEventListener('load', startup, false);\n})();\n","import './capture'\n"]}